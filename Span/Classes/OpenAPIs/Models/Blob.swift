//
// Blob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is a blob (binary large object) that the devices might upload to the service. This is messages that are typically too large to handle like regular status and sensor values, typically media files. The content type might be derived from the first few bytes of the blob and could possibly be incorrect.  Download the blob by accessing the blob URL field. This will work like a regular HTTP request for your client. Authentication is required as always. */
public struct Blob: Codable, JSONEncodable, Hashable {

    public var blobId: String?
    public var blobPath: String?
    public var contentType: String?
    public var size: String?
    public var created: String?
    public var collectionId: String?
    public var deviceId: String?
    public var gatewayId: String?
    public var properties: [String: String]?

    public init(blobId: String? = nil, blobPath: String? = nil, contentType: String? = nil, size: String? = nil, created: String? = nil, collectionId: String? = nil, deviceId: String? = nil, gatewayId: String? = nil, properties: [String: String]? = nil) {
        self.blobId = blobId
        self.blobPath = blobPath
        self.contentType = contentType
        self.size = size
        self.created = created
        self.collectionId = collectionId
        self.deviceId = deviceId
        self.gatewayId = gatewayId
        self.properties = properties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blobId
        case blobPath
        case contentType
        case size
        case created
        case collectionId
        case deviceId
        case gatewayId
        case properties
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blobId, forKey: .blobId)
        try container.encodeIfPresent(blobPath, forKey: .blobPath)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(gatewayId, forKey: .gatewayId)
        try container.encodeIfPresent(properties, forKey: .properties)
    }
}

