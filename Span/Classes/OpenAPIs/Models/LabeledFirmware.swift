//
// LabeledFirmware.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A firmware image that is tagged with a label. */
public struct LabeledFirmware: Codable, JSONEncodable, Hashable {

    public var collectionId: String?
    public var imageId: String?
    public var imageRef: String?
    public var version: String?
    public var label: String?
    public var fileName: String?
    public var length: String?
    public var sha256: String?
    public var createdAt: String?

    public init(collectionId: String? = nil, imageId: String? = nil, imageRef: String? = nil, version: String? = nil, label: String? = nil, fileName: String? = nil, length: String? = nil, sha256: String? = nil, createdAt: String? = nil) {
        self.collectionId = collectionId
        self.imageId = imageId
        self.imageRef = imageRef
        self.version = version
        self.label = label
        self.fileName = fileName
        self.length = length
        self.sha256 = sha256
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case collectionId
        case imageId
        case imageRef
        case version
        case label
        case fileName
        case length
        case sha256
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(imageRef, forKey: .imageRef)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(sha256, forKey: .sha256)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

