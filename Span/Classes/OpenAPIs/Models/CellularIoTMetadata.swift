//
// CellularIoTMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is the metadata for a Cellular IoT device connected via an APN. */
public struct CellularIoTMetadata: Codable, JSONEncodable, Hashable {

    public var gatewayId: String?
    /** Allocated IP address. */
    public var allocatedIp: String?
    public var allocatedAt: String?
    public var cellId: String?
    /** the provider in use.  The Mobile Country Code for the operator. */
    public var mcc: Int?
    public var mnc: Int?
    public var country: String?
    public var network: String?
    public var countryCode: String?
    public var lastUpdate: String?
    public var lastImsi: String?
    public var lastImei: String?

    public init(gatewayId: String? = nil, allocatedIp: String? = nil, allocatedAt: String? = nil, cellId: String? = nil, mcc: Int? = nil, mnc: Int? = nil, country: String? = nil, network: String? = nil, countryCode: String? = nil, lastUpdate: String? = nil, lastImsi: String? = nil, lastImei: String? = nil) {
        self.gatewayId = gatewayId
        self.allocatedIp = allocatedIp
        self.allocatedAt = allocatedAt
        self.cellId = cellId
        self.mcc = mcc
        self.mnc = mnc
        self.country = country
        self.network = network
        self.countryCode = countryCode
        self.lastUpdate = lastUpdate
        self.lastImsi = lastImsi
        self.lastImei = lastImei
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case gatewayId
        case allocatedIp
        case allocatedAt
        case cellId
        case mcc
        case mnc
        case country
        case network
        case countryCode
        case lastUpdate
        case lastImsi
        case lastImei
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(gatewayId, forKey: .gatewayId)
        try container.encodeIfPresent(allocatedIp, forKey: .allocatedIp)
        try container.encodeIfPresent(allocatedAt, forKey: .allocatedAt)
        try container.encodeIfPresent(cellId, forKey: .cellId)
        try container.encodeIfPresent(mcc, forKey: .mcc)
        try container.encodeIfPresent(mnc, forKey: .mnc)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
        try container.encodeIfPresent(lastImsi, forKey: .lastImsi)
        try container.encodeIfPresent(lastImei, forKey: .lastImei)
    }
}

