//
// Output.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Output resource. The configuration depends on the kind of output type. There are five outputs: Webhooks, UDP forwarding, IFTTT events, MQTT client and MQTT broker. The MQTT broker output is just used to configure the built-in MQTT broker in Span. */
public struct Output: Codable, JSONEncodable, Hashable {

    public var outputId: String?
    public var collectionId: String?
    public var type: OutputType?
    public var config: OutputConfig?
    public var enabled: Bool?
    public var tags: [String: String]?

    public init(outputId: String? = nil, collectionId: String? = nil, type: OutputType? = nil, config: OutputConfig? = nil, enabled: Bool? = nil, tags: [String: String]? = nil) {
        self.outputId = outputId
        self.collectionId = collectionId
        self.type = type
        self.config = config
        self.enabled = enabled
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case outputId
        case collectionId
        case type
        case config
        case enabled
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(outputId, forKey: .outputId)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

