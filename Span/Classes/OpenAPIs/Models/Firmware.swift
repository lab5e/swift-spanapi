//
// Firmware.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Firmware images aren&#39;t served back out through the API, only the metadata. */
public struct Firmware: Codable, JSONEncodable, Hashable {

    public var imageId: String?
    /** Make sure that the firmware image reports this version. If the version reported by this image is different the FOTA process won't be reported as successful since the device will report a version different from this. */
    public var version: String?
    /** This is just for internal house keeping, making it potentially easier to identify the firmware image. */
    public var filename: String?
    /** To ensure each image is unique the SHA-256 hash for all images in a collection must be unqique */
    public var sha256: String?
    public var length: Int?
    /** Collection ID for the collection owning the firmware image. */
    public var collectionId: String?
    public var created: String?
    /** Tags for firmware image. */
    public var tags: [String: String]?
    public var enabled: Bool?

    public init(imageId: String? = nil, version: String? = nil, filename: String? = nil, sha256: String? = nil, length: Int? = nil, collectionId: String? = nil, created: String? = nil, tags: [String: String]? = nil, enabled: Bool? = nil) {
        self.imageId = imageId
        self.version = version
        self.filename = filename
        self.sha256 = sha256
        self.length = length
        self.collectionId = collectionId
        self.created = created
        self.tags = tags
        self.enabled = enabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imageId
        case version
        case filename
        case sha256
        case length
        case collectionId
        case created
        case tags
        case enabled
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(filename, forKey: .filename)
        try container.encodeIfPresent(sha256, forKey: .sha256)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(enabled, forKey: .enabled)
    }
}

