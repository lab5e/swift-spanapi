//
// CollectionStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is statistics for an collection. */
public struct CollectionStats: Codable, JSONEncodable, Hashable {

    public var deviceCount: Int?
    public var outputCount: Int?
    public var firmwareCount: Int?
    public var blobCount: Int?
    public var gatewayCount: Int?
    public var devices: DeviceStats?
    public var outputs: OutputStats?
    public var firmware: FirmwareStats?
    public var blobs: BlobStats?
    public var gateways: GatewayStats?

    public init(deviceCount: Int? = nil, outputCount: Int? = nil, firmwareCount: Int? = nil, blobCount: Int? = nil, gatewayCount: Int? = nil, devices: DeviceStats? = nil, outputs: OutputStats? = nil, firmware: FirmwareStats? = nil, blobs: BlobStats? = nil, gateways: GatewayStats? = nil) {
        self.deviceCount = deviceCount
        self.outputCount = outputCount
        self.firmwareCount = firmwareCount
        self.blobCount = blobCount
        self.gatewayCount = gatewayCount
        self.devices = devices
        self.outputs = outputs
        self.firmware = firmware
        self.blobs = blobs
        self.gateways = gateways
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deviceCount
        case outputCount
        case firmwareCount
        case blobCount
        case gatewayCount
        case devices
        case outputs
        case firmware
        case blobs
        case gateways
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deviceCount, forKey: .deviceCount)
        try container.encodeIfPresent(outputCount, forKey: .outputCount)
        try container.encodeIfPresent(firmwareCount, forKey: .firmwareCount)
        try container.encodeIfPresent(blobCount, forKey: .blobCount)
        try container.encodeIfPresent(gatewayCount, forKey: .gatewayCount)
        try container.encodeIfPresent(devices, forKey: .devices)
        try container.encodeIfPresent(outputs, forKey: .outputs)
        try container.encodeIfPresent(firmware, forKey: .firmware)
        try container.encodeIfPresent(blobs, forKey: .blobs)
        try container.encodeIfPresent(gateways, forKey: .gateways)
    }
}

