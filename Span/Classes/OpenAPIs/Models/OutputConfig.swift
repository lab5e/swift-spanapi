//
// OutputConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Configuration for outputs. */
public struct OutputConfig: Codable, JSONEncodable, Hashable {

    /** URL for the webhook. */
    public var url: String?
    public var basicAuthUser: String?
    public var basicAuthPass: String?
    public var customHeaderName: String?
    public var customHeaderValue: String?
    public var host: String?
    public var port: Int?
    public var key: String?
    public var eventName: String?
    public var asIsPayload: Bool?
    public var endpoint: String?
    /** MQTT configuration: Disable certificate checks. Default is off. */
    public var disableCertCheck: Bool?
    public var username: String?
    public var password: String?
    public var clientId: String?
    public var topicName: String?
    public var topicTemplate: Data?
    public var payloadFormat: String?
    public var payloadTemplate: Data?

    public init(url: String? = nil, basicAuthUser: String? = nil, basicAuthPass: String? = nil, customHeaderName: String? = nil, customHeaderValue: String? = nil, host: String? = nil, port: Int? = nil, key: String? = nil, eventName: String? = nil, asIsPayload: Bool? = nil, endpoint: String? = nil, disableCertCheck: Bool? = nil, username: String? = nil, password: String? = nil, clientId: String? = nil, topicName: String? = nil, topicTemplate: Data? = nil, payloadFormat: String? = nil, payloadTemplate: Data? = nil) {
        self.url = url
        self.basicAuthUser = basicAuthUser
        self.basicAuthPass = basicAuthPass
        self.customHeaderName = customHeaderName
        self.customHeaderValue = customHeaderValue
        self.host = host
        self.port = port
        self.key = key
        self.eventName = eventName
        self.asIsPayload = asIsPayload
        self.endpoint = endpoint
        self.disableCertCheck = disableCertCheck
        self.username = username
        self.password = password
        self.clientId = clientId
        self.topicName = topicName
        self.topicTemplate = topicTemplate
        self.payloadFormat = payloadFormat
        self.payloadTemplate = payloadTemplate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case basicAuthUser
        case basicAuthPass
        case customHeaderName
        case customHeaderValue
        case host
        case port
        case key
        case eventName
        case asIsPayload
        case endpoint
        case disableCertCheck
        case username
        case password
        case clientId
        case topicName
        case topicTemplate
        case payloadFormat
        case payloadTemplate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(basicAuthUser, forKey: .basicAuthUser)
        try container.encodeIfPresent(basicAuthPass, forKey: .basicAuthPass)
        try container.encodeIfPresent(customHeaderName, forKey: .customHeaderName)
        try container.encodeIfPresent(customHeaderValue, forKey: .customHeaderValue)
        try container.encodeIfPresent(host, forKey: .host)
        try container.encodeIfPresent(port, forKey: .port)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(asIsPayload, forKey: .asIsPayload)
        try container.encodeIfPresent(endpoint, forKey: .endpoint)
        try container.encodeIfPresent(disableCertCheck, forKey: .disableCertCheck)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(topicName, forKey: .topicName)
        try container.encodeIfPresent(topicTemplate, forKey: .topicTemplate)
        try container.encodeIfPresent(payloadFormat, forKey: .payloadFormat)
        try container.encodeIfPresent(payloadTemplate, forKey: .payloadTemplate)
    }
}

