//
// FotaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FotaAPI {

    /**
     BETA: Assign a target image
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter label: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func assignTargetImage(collectionId: String, imageId: String, label: String? = nil, deviceId: String? = nil, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: AssignTargetImageResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return assignTargetImageWithRequestBuilder(collectionId: collectionId, imageId: imageId, label: label, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: Assign a target image
     - PATCH /span/collections/{collectionId}/firmware/labeled/{imageId}/assign
     - Assign a particular labeled image to a device or a collection
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter label: (query)  (optional)
     - parameter deviceId: (query)  (optional)
     - returns: RequestBuilder<AssignTargetImageResponse> 
     */
    open class func assignTargetImageWithRequestBuilder(collectionId: String, imageId: String, label: String? = nil, deviceId: String? = nil) -> RequestBuilder<AssignTargetImageResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/labeled/{imageId}/assign"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: false),
            "deviceId": (wrappedValue: deviceId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssignTargetImageResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Clear FOTA error
     
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clearFirmwareError(collectionId: String, deviceId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ClearFirmwareErrorResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return clearFirmwareErrorWithRequestBuilder(collectionId: collectionId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Clear FOTA error
     - DELETE /span/collections/{collectionId}/devices/{deviceId}/fwerror
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - returns: RequestBuilder<ClearFirmwareErrorResponse> 
     */
    open class func clearFirmwareErrorWithRequestBuilder(collectionId: String, deviceId: String) -> RequestBuilder<ClearFirmwareErrorResponse> {
        var localVariablePath = "/span/collections/{collectionId}/devices/{deviceId}/fwerror"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClearFirmwareErrorResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create firmware
     
     - parameter collectionId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createFirmware(collectionId: String, body: CreateFirmwareBody, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Firmware?, _ error: Error?) -> Void)) -> RequestTask {
        return createFirmwareWithRequestBuilder(collectionId: collectionId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create firmware
     - POST /span/collections/{collectionId}/firmware
     - Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Firmware> 
     */
    open class func createFirmwareWithRequestBuilder(collectionId: String, body: CreateFirmwareBody) -> RequestBuilder<Firmware> {
        var localVariablePath = "/span/collections/{collectionId}/firmware"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Firmware>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: Create a labeled firmware image
     
     - parameter collectionId: (path)  
     - parameter version: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter imageRef: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createLabeledFirmware(collectionId: String, version: String? = nil, label: String? = nil, imageRef: String? = nil, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: CreateLabeledFirmwareResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createLabeledFirmwareWithRequestBuilder(collectionId: collectionId, version: version, label: label, imageRef: imageRef).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: Create a labeled firmware image
     - POST /span/collections/{collectionId}/firmware/labeled
     - Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter version: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter imageRef: (query)  (optional)
     - returns: RequestBuilder<CreateLabeledFirmwareResponse> 
     */
    open class func createLabeledFirmwareWithRequestBuilder(collectionId: String, version: String? = nil, label: String? = nil, imageRef: String? = nil) -> RequestBuilder<CreateLabeledFirmwareResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/labeled"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": (wrappedValue: version?.encodeToJSON(), isExplode: false),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: false),
            "imageRef": (wrappedValue: imageRef?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateLabeledFirmwareResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete firmware
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteFirmware(collectionId: String, imageId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Firmware?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteFirmwareWithRequestBuilder(collectionId: collectionId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete firmware
     - DELETE /span/collections/{collectionId}/firmware/{imageId}
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - returns: RequestBuilder<Firmware> 
     */
    open class func deleteFirmwareWithRequestBuilder(collectionId: String, imageId: String) -> RequestBuilder<Firmware> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/{imageId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Firmware>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: Remove a tagged firmware image
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLabeledImage(collectionId: String, imageId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLabeledImageWithRequestBuilder(collectionId: collectionId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: Remove a tagged firmware image
     - DELETE /span/collections/{collectionId}/firmware/labeled/{imageId}
     - Remove a tagged firmware image from the backing store and it's metadata
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteLabeledImageWithRequestBuilder(collectionId: String, imageId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/labeled/{imageId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Firmware usage
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func firmwareUsage(collectionId: String, imageId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: FirmwareUsageResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return firmwareUsageWithRequestBuilder(collectionId: collectionId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Firmware usage
     - GET /span/collections/{collectionId}/firmware/{imageId}/usage
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - returns: RequestBuilder<FirmwareUsageResponse> 
     */
    open class func firmwareUsageWithRequestBuilder(collectionId: String, imageId: String) -> RequestBuilder<FirmwareUsageResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/{imageId}/usage"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FirmwareUsageResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: Get state for a single device
     
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getImageState(collectionId: String, deviceId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: GetImageStateResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getImageStateWithRequestBuilder(collectionId: collectionId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: Get state for a single device
     - PATCH /span/collections/{collectionId}/devices/{deviceId}/fotastate
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - returns: RequestBuilder<GetImageStateResponse> 
     */
    open class func getImageStateWithRequestBuilder(collectionId: String, deviceId: String) -> RequestBuilder<GetImageStateResponse> {
        var localVariablePath = "/span/collections/{collectionId}/devices/{deviceId}/fotastate"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetImageStateResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List firmware
     
     - parameter collectionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listFirmware(collectionId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ListFirmwareResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listFirmwareWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List firmware
     - GET /span/collections/{collectionId}/firmware
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - returns: RequestBuilder<ListFirmwareResponse> 
     */
    open class func listFirmwareWithRequestBuilder(collectionId: String) -> RequestBuilder<ListFirmwareResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFirmwareResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: List image assignments plus states
     
     - parameter collectionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listImageStates(collectionId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ListImageStatesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listImageStatesWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: List image assignments plus states
     - GET /span/collections/{collectionId}/firmware/labeled/states
     - List the status for the labeled firmware images in the collection
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - returns: RequestBuilder<ListImageStatesResponse> 
     */
    open class func listImageStatesWithRequestBuilder(collectionId: String) -> RequestBuilder<ListImageStatesResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/labeled/states"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListImageStatesResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: List version history for a single device
     
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listImageVersionHistory(collectionId: String, deviceId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ListImageVersionHistoryResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listImageVersionHistoryWithRequestBuilder(collectionId: collectionId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: List version history for a single device
     - PATCH /span/collections/{collectionId}/devices/{deviceId}/fotalog
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter deviceId: (path)  
     - returns: RequestBuilder<ListImageVersionHistoryResponse> 
     */
    open class func listImageVersionHistoryWithRequestBuilder(collectionId: String, deviceId: String) -> RequestBuilder<ListImageVersionHistoryResponse> {
        var localVariablePath = "/span/collections/{collectionId}/devices/{deviceId}/fotalog"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListImageVersionHistoryResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     BETA: List the labeled firmware images for a collection
     
     - parameter collectionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listLabeledFirmware(collectionId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ListLabeledFirmwareResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listLabeledFirmwareWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     BETA: List the labeled firmware images for a collection
     - GET /span/collections/{collectionId}/firmware/labeled
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - returns: RequestBuilder<ListLabeledFirmwareResponse> 
     */
    open class func listLabeledFirmwareWithRequestBuilder(collectionId: String) -> RequestBuilder<ListLabeledFirmwareResponse> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/labeled"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListLabeledFirmwareResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve firmware
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func retrieveFirmware(collectionId: String, imageId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Firmware?, _ error: Error?) -> Void)) -> RequestTask {
        return retrieveFirmwareWithRequestBuilder(collectionId: collectionId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve firmware
     - GET /span/collections/{collectionId}/firmware/{imageId}
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - returns: RequestBuilder<Firmware> 
     */
    open class func retrieveFirmwareWithRequestBuilder(collectionId: String, imageId: String) -> RequestBuilder<Firmware> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/{imageId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Firmware>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve firmware statistics
     
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func retrieveFirmwareStats(collectionId: String, imageId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: FirmwareStats?, _ error: Error?) -> Void)) -> RequestTask {
        return retrieveFirmwareStatsWithRequestBuilder(collectionId: collectionId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve firmware statistics
     - GET /span/collections/{collectionId}/firmware/{imageId}/stats
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter imageId: (path)  
     - returns: RequestBuilder<FirmwareStats> 
     */
    open class func retrieveFirmwareStatsWithRequestBuilder(collectionId: String, imageId: String) -> RequestBuilder<FirmwareStats> {
        var localVariablePath = "/span/collections/{collectionId}/firmware/{imageId}/stats"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FirmwareStats>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update firmware
     
     - parameter existingCollectionId: (path)  
     - parameter imageId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateFirmware(existingCollectionId: String, imageId: String, body: UpdateFirmwareBody, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Firmware?, _ error: Error?) -> Void)) -> RequestTask {
        return updateFirmwareWithRequestBuilder(existingCollectionId: existingCollectionId, imageId: imageId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update firmware
     - PATCH /span/collections/{existingCollectionId}/firmware/{imageId}
     - Only the version and tags fields can be updated. The other fields will be ignored.
     - API Key:
       - type: apiKey X-API-Token (HEADER)
       - name: APIToken
     - parameter existingCollectionId: (path)  
     - parameter imageId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Firmware> 
     */
    open class func updateFirmwareWithRequestBuilder(existingCollectionId: String, imageId: String, body: UpdateFirmwareBody) -> RequestBuilder<Firmware> {
        var localVariablePath = "/span/collections/{existingCollectionId}/firmware/{imageId}"
        let existingCollectionIdPreEscape = "\(APIHelper.mapValueToPathItem(existingCollectionId))"
        let existingCollectionIdPostEscape = existingCollectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{existingCollectionId}", with: existingCollectionIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpanAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Firmware>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
