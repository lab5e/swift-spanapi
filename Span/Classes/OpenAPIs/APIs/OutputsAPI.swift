//
// OutputsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class OutputsAPI {
    /**
     Create output
     
     - parameter collectionId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOutput(collectionId: String, body: Output, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Output?, _ error: Error?) -> Void)) {
        createOutputWithRequestBuilder(collectionId: collectionId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create output
     - POST /collections/{collectionId}/outputs
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Output> 
     */
    open class func createOutputWithRequestBuilder(collectionId: String, body: Output) -> RequestBuilder<Output> {
        var path = "/collections/{collectionId}/outputs"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Output>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete output
     
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutput(collectionId: String, outputId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Output?, _ error: Error?) -> Void)) {
        deleteOutputWithRequestBuilder(collectionId: collectionId, outputId: outputId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete output
     - DELETE /collections/{collectionId}/outputs/{outputId}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - returns: RequestBuilder<Output> 
     */
    open class func deleteOutputWithRequestBuilder(collectionId: String, outputId: String) -> RequestBuilder<Output> {
        var path = "/collections/{collectionId}/outputs/{outputId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let outputIdPreEscape = "\(APIHelper.mapValueToPathItem(outputId))"
        let outputIdPostEscape = outputIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputId}", with: outputIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Output>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List outputs
     
     - parameter collectionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOutputs(collectionId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: ListOutputResponse?, _ error: Error?) -> Void)) {
        listOutputsWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List outputs
     - GET /collections/{collectionId}/outputs
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - returns: RequestBuilder<ListOutputResponse> 
     */
    open class func listOutputsWithRequestBuilder(collectionId: String) -> RequestBuilder<ListOutputResponse> {
        var path = "/collections/{collectionId}/outputs"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ListOutputResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Output logs
     
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logs(collectionId: String, outputId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: OutputLogResponse?, _ error: Error?) -> Void)) {
        logsWithRequestBuilder(collectionId: collectionId, outputId: outputId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Output logs
     - GET /collections/{collectionId}/outputs/{outputId}/logs
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - returns: RequestBuilder<OutputLogResponse> 
     */
    open class func logsWithRequestBuilder(collectionId: String, outputId: String) -> RequestBuilder<OutputLogResponse> {
        var path = "/collections/{collectionId}/outputs/{outputId}/logs"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let outputIdPreEscape = "\(APIHelper.mapValueToPathItem(outputId))"
        let outputIdPostEscape = outputIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputId}", with: outputIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OutputLogResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Retrieve output
     
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveOutput(collectionId: String, outputId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Output?, _ error: Error?) -> Void)) {
        retrieveOutputWithRequestBuilder(collectionId: collectionId, outputId: outputId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve output
     - GET /collections/{collectionId}/outputs/{outputId}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - returns: RequestBuilder<Output> 
     */
    open class func retrieveOutputWithRequestBuilder(collectionId: String, outputId: String) -> RequestBuilder<Output> {
        var path = "/collections/{collectionId}/outputs/{outputId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let outputIdPreEscape = "\(APIHelper.mapValueToPathItem(outputId))"
        let outputIdPostEscape = outputIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputId}", with: outputIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Output>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Output status
     
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func status(collectionId: String, outputId: String, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: OutputStatusResponse?, _ error: Error?) -> Void)) {
        statusWithRequestBuilder(collectionId: collectionId, outputId: outputId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Output status
     - GET /collections/{collectionId}/outputs/{outputId}/status
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - returns: RequestBuilder<OutputStatusResponse> 
     */
    open class func statusWithRequestBuilder(collectionId: String, outputId: String) -> RequestBuilder<OutputStatusResponse> {
        var path = "/collections/{collectionId}/outputs/{outputId}/status"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let outputIdPreEscape = "\(APIHelper.mapValueToPathItem(outputId))"
        let outputIdPostEscape = outputIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputId}", with: outputIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OutputStatusResponse>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update output
     
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOutput(collectionId: String, outputId: String, body: Output, apiResponseQueue: DispatchQueue = SpanAPI.apiResponseQueue, completion: @escaping ((_ data: Output?, _ error: Error?) -> Void)) {
        updateOutputWithRequestBuilder(collectionId: collectionId, outputId: outputId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update output
     - PATCH /collections/{collectionId}/outputs/{outputId}
     - Running outputs will be restarted if required. Note that the collection ID can't be changed on an existing output.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter collectionId: (path)  
     - parameter outputId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Output> 
     */
    open class func updateOutputWithRequestBuilder(collectionId: String, outputId: String, body: Output) -> RequestBuilder<Output> {
        var path = "/collections/{collectionId}/outputs/{outputId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let outputIdPreEscape = "\(APIHelper.mapValueToPathItem(outputId))"
        let outputIdPostEscape = outputIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputId}", with: outputIdPostEscape, options: .literal, range: nil)
        let URLString = SpanAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Output>.Type = SpanAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
